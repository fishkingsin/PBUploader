package {	import flash.events.MouseEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.net.LocalConnection;	import flash.geom.Point;	import flash.geom.Matrix;	import gs.TweenMax;	import net.hires.debug.Logger;	public class Covers extends MovieClip	{		var addPhoto:Boolean = false;		var pressedTarget:Cover;		var covers:Array=[new Cover(),new Cover(),new Cover(),new Cover(),new Cover()];		var files:Array=["a.png",		 "b.png",		 "c.png",		 "d.png",		 "e.png",		 "f.png",		 "g.png",		 "h.png",		 "i.png",		 "j.png",];		var completeFlag:int = 0;//[false,false,false,false,false];		var _host:String = "127.0.0.1/pic/";		static var duration:int = 1;		static const WIDTH:int = 1920;		static const HEIGHT:int = 1080;		//var interval:int = 0;		var _code:String = "";		var eachWidth:Number;		public function set host(__host:String)		{			_host = __host;		}		public function get host()		{			return _host;		}		//var interval:int;		public function Covers()		{			eachWidth = WIDTH/covers.length;			// constructor code		}		public function loadFromCode(code:String = null)		{			if (code!=null)			{				_code = code;				addEventListener(Event.ADDED_TO_STAGE,onAdded);				//interval = setInterval(timeout,10000);			}			else			{				Logger.debug("Select Photo Invalid Code");			}			/*addEventListener(Event.REMOVED_FROM_STAGE,function onRemoved(e:Event):void{			remove();			 });*/		}//		function timeout()//		{//			clearInterval(interval);//			dispatchEvent(new IOErrorEvent(IOErrorEvent.IO_ERROR,true));//			addPhoto = false; //		}		function onAdded(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE,onAdded);			var i:int = 0;			remove();			for each (var cover:Cover in covers)			{				var _url = "http://" + _host + _code + files[i];				//Logger.debug(_url);				cover.setup(_url,new Point((i+0.5)*WIDTH/covers.length,512),new Point(WIDTH+WIDTH*0.5,512));				cover.addEventListener(Event.COMPLETE,handleComplete);				cover.addEventListener(IOErrorEvent.IO_ERROR,handleError);				//cover.visible = true;				addChild(cover);				i++;			}			addPhoto = true;		}		function handleError(e:IOErrorEvent)		{			e.target.removeEventListener(IOErrorEvent.IO_ERROR,handleError);			addPhoto = false;			dispatchEvent(new IOErrorEvent(IOErrorEvent.IO_ERROR,true));			Logger.debug("Error Loading ",e.target.url);		}		function handleComplete(e:Event)		{			e.target.removeEventListener(Event.COMPLETE,handleComplete);			Logger.debug("handleComplete",e.target.url);			var target:Cover = e.target as Cover;			//target.addEventListener(Event.COMPLETE,handleComplete);			//target.scaleY = target.scaleX = ((WIDTH / covers.length) / target.width);			target.x = WIDTH + target.width;			target.addEventListener(MouseEvent.CLICK,coverPressed);			completeFlag++;			if (completeFlag==covers.length)			{				//clearInterval(interval);				var i:int = 0;								for each (var cover:Cover in covers)				{					var _x:Number = i*eachWidth+eachWidth*0.5;					cover.setFadeInPoint(new Point(_x,512));					cover.setFadeOutPoint(new Point(_x+WIDTH,512));					//cover.visible = true;					cover.fadeIn(eachWidth/cover.photo.width,i*0.2);					i++;				}				dispatchEvent(new Event(Event.COMPLETE,true));				completeFlag = 0;			}		}		function remove()		{			Logger.debug("SelecPhoto Removed from stage");			addPhoto = false;			for each (var flag:Boolean in completeFlag)			{				flag = false;			}			while (numChildren>0)			{				removeChildAt(0);			}			try			{				new LocalConnection().connect('foo');				new LocalConnection().connect('foo');			}			catch (e: * )			{				//Logger.debug("Forcing Garbage Collection :"+e.toString());			}		}		function coverPressed(e:MouseEvent)		{			pressedTarget = e.currentTarget as Cover;						if (addPhoto)			{				var delay:Number = 0.1;				var i = delay * covers.length;				for each (var cover:Cover in covers)				{					var photo:Sprite = cover.photo;					if (pressedTarget!=cover)					{						cover.removeEventListener(MouseEvent.CLICK,coverPressed);						cover.setFadeOutPoint(new Point(WIDTH+photo.width,HEIGHT/2));						cover.fadeOut(cover.scaleX,i);					}					else					{						var thScale:Number;						if (photo.width > photo.height)						{							thScale = HEIGHT * 0.7 / photo.height;						}						else if (photo.height>photo.width)						{							thScale = (photo.height>HEIGHT)? (HEIGHT*0.7)/photo.height:photo.height/(HEIGHT*0.7);						}						//Logger.debug("thScale "+thScale);						TweenMax.to(cover,duration,{delay:delay*(covers.length+1),						 x:737,//WIDTH/2,						 y:849,//HEIGHT*0.8,						 scaleX:thScale,						 scaleY:thScale,						 onComplete:fadeOutComplete,						 onCompleteParams:[this]});					}					i -=  delay;				}				addPhoto = false;				dispatchEvent(new Event("OBJECT_PRESS",true));			}			else			{				var delay:Number = 0.1;				var i = 0;				for each (var cover:Cover in covers)				{					if (pressedTarget!=cover)cover.addEventListener(MouseEvent.CLICK,coverPressed);					var photo:Sprite = cover.photo;					if (photo.width > (WIDTH / covers.length))					{						//Logger.debug("scale before : "+cover.scaleX);						//cover.visible = true;						cover.fadeIn((Number(WIDTH)/Number(covers.length))/photo.width,i*delay);						//Logger.debug("scale after : "+(Number(WIDTH)/Number(covers.length))/photo.width);					}					else					{						//cover.visible = true;						cover.fadeIn(cover.scaleX,i*delay);					}					i +=  0.5;				}				addPhoto = true;				dispatchEvent(new Event("OBJECT_RELEASE",true));			}		}		function fadeOutComplete(arg:*):void		{			dispatchEvent(new Event("OBJECT_PRESS_FADE_COMPLETE",true));		}	}}