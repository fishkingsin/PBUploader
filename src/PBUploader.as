package {	import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.StageDisplayState;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.html.HTMLLoader;	import flash.utils.ByteArray;	import flash.filesystem.File;	import flash.filesystem.FileStream;	import flash.filesystem.FileMode;	import flash.media.Sound;	import flash.media.SoundTransform;	import flash.media.SoundChannel;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.utils.setInterval;	import flash.utils.clearInterval;	import net.hires.debug.Logger;	import gs.TweenMax;	import com.facebook.graph.FacebookDesktop;	import com.adobe.serialization.json.JSON;	import com.adobe.images.JPGEncoder;	import com.app.ui.likeButton.LikeButtonControl;	import com.parsera.net.NetLoader;	import fl.motion.CustomEase;	public class PBUploader extends BaseApp	{		protected static const APP_ID:String = "361158920631434";// Your App ID.		protected static const APP_ORIGIN:String = "https://enigmatic-springs-5588.herokuapp.com/";// The site URL of your application (specified in your app settings); needed for clearing cookie when logging out.		var minterface:InterfacePraser;		var container:MovieClip = new MovieClip  ;		var ss:ScreenSaver;		var functionName:String;		var ssFilePath:String;		var currentPageName:String;		var pressedBtnName:String;		var pressedBtn:customButton;		var loginBtn:customButton;		var currentSprite:Sprite;		var preSprite:Sprite;		var isWaitingFinish:Boolean;		var snd:Sound = new Sound  ;		var snd2:Sound = new Sound  ;		var sc:SoundChannel = new SoundChannel  ;		var st:SoundTransform = new SoundTransform  ;		var access_token:String;		var targetURL:String;		var targetPhoto:Sprite;		var spinner:SmoothingBitmapLoader;		//html		var htmlContainer:Sprite=new Sprite();			var maskingShape:Sprite=new Sprite();			var html:HTMLLoader = new HTMLLoader();			var htmlLoaded:Boolean = false;		public function PBUploader()		{			// constructor code			super();			init();		}		public function init()		{			//addChild(new SmoothingBitmapLoader("./data/images/background/z2_1.png"));			container.name = "container";			addChild(container);								}		//=====================================================================================================================================;		//locd settings from xml		override public function xmlLoaded(event:Event):void		{			functionName = "xmlLoaded";			this.mXML = XML(xmlLoader.data);			ss = new ScreenSaver(stage,this.mXML.IDLE);			ssFilePath = this.mXML.SCREENSAVER;			snd.load(new URLRequest(this.mXML.SOUND[0]));			snd2.load(new URLRequest(this.mXML.SOUND[1]));			Logger.info("this.mXML.IP "+this.mXML.IP);			STATE = PLAYING_SCREEN_SAVER;			ss.addEventListener("idel", onIdle);			container.addEventListener(MouseEvent.CLICK,function onClick(e:MouseEvent):void			{			ss.resetTimeOut();			});			this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;			FacebookDesktop.init(APP_ID,handleInit);			minterface = new InterfacePraser ();			minterface.addEventListener(InterfacePraser.INIT,insertToPage);			spinner = new SmoothingBitmapLoader("./spinner.swf");			spinner.x = (stage.stageWidth*0.5)-255*0.5;			spinner.y = (stage.stageHeight*0.5)-267*0.5;			html.width = 1024;			html.height = 768;						html.addEventListener(Event.ADDED_TO_STAGE,htmlAdded);			maskingShape.graphics.lineStyle();			maskingShape.graphics.beginFill(0xFFFFFF,1);			maskingShape.graphics.drawRect(this.mXML.MASK.X,										   this.mXML.MASK.Y,										   this.mXML.MASK.WIDTH,										   this.mXML.MASK.HEIGHT);//554,59,56,23);			maskingShape.graphics.endFill();						htmlContainer.addChild(html);			maskingShape.mouseEnabled = false;			htmlContainer.addChild(maskingShape);			htmlContainer.mouseEnabled = false;			html.mask = maskingShape;			//html.addEventListener(MouseEvent.CLICK,handleHTMLClicked,true);			htmlContainer.scaleX = htmlContainer.scaleY = 1;			htmlContainer.x = this.mXML.HTML.X;			htmlContainer.y = this.mXML.HTML.Y;			var interval:int = setInterval(function clearLog()										   {											   Logger.clear();										   },30000);		}		function insertToPage(e:Event):void		{			//e.target.removeListener(InterfacePraser.INIT,insertToPage);			container.addChild(minterface.getPageByName("home"));			//minterface.getPageByName("select_photo").addEventListener("OBJECT_PRESS",handleSelectCover);			minterface.getBackgroundByName("covers").addEventListener(Event.COMPLETE,handleBGComplete);					}		function handleBGComplete(e:Event)		{			e.target.removeEventListener(Event.COMPLETE, handleBGComplete);			Logger.info(e.target);			Logger.info(e.target.getChildAt(0));			var loaderContent:Object = e.target.getChildAt(0).loaderContent;			Logger.info(loaderContent);			var covers:Covers = loaderContent.covers;			covers.host = this.mXML.IP;			covers.addEventListener("OBJECT_PRESS",handleSelectCover);			covers.addEventListener("OBJECT_PRESS_FADE_COMPLETE",handleFadeComplete);			covers.addEventListener("OBJECT_RELEASE",handleReleaseCover);			Logger.info(covers.host);			loginBtn = minterface.getButtonByName("btn_login") as customButton;			//loginBtn.visible = false;		}		function handleInit(response:Object,fail:Object):void		{			LogResponse(response,fail);			if (response)			{				//loginBtn.visible = false;				access_token = response.accessToken;				logout( handleLogout);			}		}		function handleReleaseCover(e:Event)		{			if(currentSprite.name=="selectphoto")			{			targetURL = "";			targetPhoto = null;			//try{				if(container.contains(htmlContainer))				{				container.removeChild(htmlContainer);				}				//loginBtn.visible = false;			//}			//catch(error:Error)			//{							//}			//container.removeChild(maskingShape);			}		}			function handleSelectCover(e:Event)		{			if(currentSprite.name=="selectphoto")			{			Logger.info(e.target);			Logger.info(e.target.pressedTarget);			Logger.info(e.target.pressedTarget.url);			targetURL = e.target.pressedTarget.url;			targetPhoto = e.target.pressedTarget.photo;			//logout( handleLogout);			//loginBtn.visible = true;			//e.target.mouseEnabled = false;						//container.addChild(maskingShape);						if(!htmlLoaded)			{				html.load(new URLRequest(this.mXML.URL));				html.addEventListener(Event.COMPLETE,htmlLoadedComplete);				container.addChild(spinner);				htmlLoaded = true;			}			else			{				var testLink:Object = html.window.document.getElementById("mainbuttonspan");     			testLink.addEventListener("click", clickHandler); 				container.addChild(htmlContainer);			}			}						}		function handleFadeComplete(e:Event)		{			//html.load(new URLRequest(this.mXML.URL));			//html.addEventListener(Event.COMPLETE,htmlLoadedComplete);			//container.addChild(spinner);		}		function htmlAdded(e:Event)		{					}		function htmlLoadedComplete(e:Event):void{			html.removeEventListener(Event.COMPLETE,htmlLoadedComplete);			if(currentSprite.name=="selectphoto")			{			container.addChild(htmlContainer);			Logger.debug("htmlLoadedComplete Event Ypte: "+e.type);			container.removeChild(spinner);			//loginBtn.visible = false;			var testLink:Object = html.window.document.getElementById("mainbuttonspan");     		testLink.addEventListener("click", clickHandler); 			}		}				function clickHandler(e:Object):void{			if(currentSprite.name=="selectphoto")			{			trace("Evenbt of Type"+ e.type);			if(container.contains(htmlContainer))container.removeChild(htmlContainer);						spinner.addEventListener(Event.ADDED,function spinnedAdd(e:Event)			 {				 spinner.removeEventListener(Event.ADDED, spinnedAdd);				 var Interval:int = setInterval(function callBack()												   {													   clearInterval(Interval);													   loadImageToFile(targetURL);												   },1000);				 			 });			 container.addChild(spinner);			}		}		function loadImageToFile(__url:String)		{			if (targetPhoto)			{				var bitmap:Bitmap = new Bitmap();				var bitmapData:BitmapData = new BitmapData(targetPhoto.width,targetPhoto.height);				bitmapData.draw( targetPhoto );				bitmap.bitmapData = bitmapData;				var jpgEncoder:JPGEncoder = new JPGEncoder(100);				var jpgStream:ByteArray = jpgEncoder.encode(bitmapData);				var file:File = new File(File.applicationDirectory.nativePath + "/data/temp.jpg");				var stream:FileStream = new FileStream();				stream.open(file, FileMode.WRITE);				stream.writeBytes(jpgStream);				stream.close();				fileUpLoad(file);				bitmapData.dispose();				targetPhoto = null;			}		}		function fileUpLoad(file:File)		{			var params:Object  = new Object();			params.message = mXML.CAPTION;			params.fileName = 'testImage';			params.image = file;			params.access_token = access_token;			FacebookDesktop.api('/me/photos',handleUploadComplete,params,'POST');		}		function ioErrorHandler(event:IOErrorEvent):void		{			Logger.info("ioErrorHandler: " + event);		}		protected function handleUploadComplete(response:Object,fail:Object):void		{			//var status = response ? 'Successfully uploaded':'Error uploading';			Logger.info(JSON.stringify(response));			Logger.info(JSON.stringify(fail));			logout( handleLogout);						container.removeChild(spinner);			processButtonAction(minterface.getButtonByName("btn_upload") as customButton);			var interval:int = setInterval(function gotoHome()										   {											   clearInterval(interval);											   processButtonAction(minterface.getButtonByName("btn_home") as customButton);										   },5000);		}		function handleLogin(response:Object,fail:Object):void		{			LogResponse(response,fail);			if (response)			{				access_token = response.accessToken;				processButtonAction(minterface.getButtonByName("btn_login") as customButton );			}			else if (fail)			{				processButtonAction(minterface.getButtonByName("btn_home") as customButton );			}		}		public function logout(handler:Function = null):void		{			var params:URLVariables = new URLVariables();			params.next = APP_ORIGIN;			//if (FacebookDesktop.getSession())			{				params.access_token = access_token;//FacebookDesktop.getSession().accessToken;			}			var req:URLRequest = new URLRequest("https://www.facebook.com/logout.php");			req.method = URLRequestMethod.GET;			req.data = params;			var netLoader:NetLoader = new NetLoader();			netLoader.load(req);			try{				FacebookDesktop.logout(handler, APP_ORIGIN);			}			catch(error:Error)			{				Logger.info(error.message);			}					}		function handleLogout(response:Object):void		{			Logger.info(response);		}		function onIdle(e:Event):void		{			functionName = "onIdle";			Logger.info(functionName);			if (STATE!=PLAYING_SCREEN_SAVER)			{				logout( handleLogout);				setPageOrder(container,minterface.getPageByName("home"),ssFilePath);				ss.resetTimeOut();			}		}		function NextPage(file:String,caption:String,next_page:String):void		{			functionName = "NextPage";			if (next_page!=currentPageName || next_page!="-1")			{				//if(preSprite)//yucoLogger.Info("prevPage  = "+preSprite.name,functionName,getCurrentClassName(this));				var currentcontainerprite = minterface.getPageByName(next_page);				if (currentcontainerprite)				{					currentcontainerprite.x = 0;					currentcontainerprite.y = 0;					setPageOrder(container,currentcontainerprite,file,false);				}				else				{				}			}			else			{				//yucoLogger.Info("Start Video",functionName,getCurrentClassName(this));				//startVid(container,file);			}		}		function LogResponse(response:Object,fail:Object=null)		{			Logger.info("response "+JSON.stringify(response));			Logger.info(JSON.stringify(response));			if (fail!=null)			{				Logger.info("fail "+JSON.stringify(fail));			}		}		override function btnPressed(e:MouseEvent):void		{			functionName = "btnPressed";			Logger.info("-----------------------------------------------------------------------");			Logger.info("Pressed Button :name ="+ e.target.name,functionName,getCurrentClassName(this));			switch (e.target.name)			{				case "btn_login" :					logout( handleLogout);					FacebookDesktop.login(handleLogin,['user_photos', 'publish_stream' , 'user_likes' , 'read_stream']);					//processButtonAction(e.target as customButton);					break;				case "btn_upload" :										break;				case "btn_home" :					logout( handleLogout);					processButtonAction(e.target as customButton);					break;				default :					if (e.target is customButton)					{						Logger.info(e.target.name);						processButtonAction(e.target as customButton);					}					return;					break;			}		}		//handle button data : name , next page, .... 		public function processButtonAction(e:customButton):void		{			functionName = "processButtonAction";			pressedBtn = e;			pressedBtnName = pressedBtn.name;			if (STATE == PLAYING_SCREEN_SAVER)			{				//fader.draw(this);			}			STATE = PLAYING_CONTENT;			var targetButtons = e;			if (targetButtons)			{				NextPage(targetButtons.path,targetButtons.caption,targetButtons.nextPage);			}		}		//==================================================================================================================================		function setPageOrder(_parent:Sprite , sprite:Sprite,file:String,isFadeIn:Boolean=false,isFade:Boolean=false):void		{			if(sprite.name=="home")			{				htmlLoaded = false;				logout(handleLogout);			}			//if(preSprite==null)preSprite = sprite;			currentSprite = sprite;			waitingToAdd();		}		function waitingToAdd():void		{			for (var i:int = 0; i<currentSprite.numChildren; i++)			{				if (currentSprite.getChildAt(i) is customButton)				{					var mc:customButton = currentSprite.getChildAt(i) as customButton;					mc.highlight(false);					if (pressedBtn)					{						if (mc.name == pressedBtn.name)						{							mc.highlight(true);						}					}				}			}			currentPageName = currentSprite.name;			try			{				container.addChild(currentSprite);				var temp:SmoothingBitmapLoader = (currentSprite.getChildAt(0) as SmoothingBitmapLoader);				trace("temp "+temp.name);				temp.reloadImage();			}			catch (error:Error)			{			}			if (currentSprite)			{				//currentSprite.x = stage.stageWidth;				if (preSprite!=null)				{										TweenMax.to(preSprite,0.5,{alpha:0});				}				currentSprite.alpha = 0;				TweenMax.to(currentSprite,0.5,{alpha:1,onComplete:onFadeComplete,onCompleteParams:[container]});			}		}		function onFadeComplete(arg:*)		{			//if(currentSprite!=preSprite)			//{			//}			try			{				while (arg.numChildren>1)				{					var mc:Sprite = arg.getChildAt(numChildren-1);					if (currentSprite!=mc)					{						arg.removeChild(mc);					}				}			}			catch (error:Error)			{				Logger.info(error.message);			}			preSprite = currentSprite;		}		function playbackFX(_snd: * ):void		{			try			{				if (_snd!=null && _snd is Sound)				{					var sound:Sound = _snd as Sound;					sc = sound.play();					st.volume = 0.5;					sc.soundTransform = st;				}			}			catch (e:Error)			{			}		}		function getCurrentClassName(c:Object):String		{			var cString:String = c.toString();			var cSplittedFirst:Array = cString.split('[object ');			var cFirstString:String = String(cSplittedFirst[1]);			var cSplittedLast:Array = cFirstString.split(']');			var cName:String = cSplittedLast.join('');			return cName;		}	}}